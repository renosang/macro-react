const express = require('express');
const fetch = require('node-fetch'); // ƒê·∫£m b·∫£o b·∫°n ƒë√£ import fetch
const router = express.Router();
const { protect } = require('../middleware/authMiddleware'); // B·∫£o v·ªá route

/**
 * G·ª≠i tin nh·∫Øn ƒë·∫øn Google Gemini API v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi. (H√†m n√†y gi·ªØ nguy√™n)
 * @param {string} message Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng.
 * @returns {Promise<string>} Ph·∫£n h·ªìi t·ª´ AI.
 */
async function runChat(message) {
  const apiKey = process.env.GEMINI_API_KEY;
  if (!apiKey) {
    throw new Error("GEMINI_API_KEY is not set in environment variables.");
  }
  
    const modelName = "gemini-2.5-flash-lite"; // ƒê√£ c·∫≠p nh·∫≠t theo y√™u c·∫ßu
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${apiKey}`;

  const payload = {
    contents: [{ parts: [{ text: message }] }],
  };

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    const data = await response.json();

    if (!response.ok) {
      console.error("Gemini API Error:", data);
      const errorMessage = data?.error?.message || `Google AI API request failed with status ${response.status}`;
      throw new Error(errorMessage);
    }
    
    if (data.candidates && data.candidates.length > 0) {
      return data.candidates[0].content.parts[0].text;
    } else {
      return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ra ph·∫£n h·ªìi v√†o l√∫c n√†y.";
    }
  } catch (error) {
    console.error('L·ªói khi g·ªçi Gemini API:', error);
    throw new Error('ƒê√£ c√≥ l·ªói x·∫£y ra khi giao ti·∫øp v·ªõi Google AI.');
  }
}

// ----- C√ÅC H√ÄM HELPER CHO VI·ªÜC D·ªäCH THU·∫¨T GI·ªÆ NGUY√äN ƒê·ªäNH D·∫†NG -----

/**
 * B√≥c t√°ch t·∫•t c·∫£ c√°c chu·ªói vƒÉn b·∫£n t·ª´ c·∫•u tr√∫c Slate.
 * @param {Array<object>} nodes - M·∫£ng c√°c node t·ª´ Slate.
 * @returns {Array<string>} - M·∫£ng c√°c chu·ªói vƒÉn b·∫£n.
 */
function extractTextsFromSlate(nodes) {
  let texts = [];
  for (const node of nodes) {
    if (node.hasOwnProperty('text')) {
      texts.push(node.text);
    }
    if (node.children) {
      texts = texts.concat(extractTextsFromSlate(node.children));
    }
  }
  return texts;
}

/**
 * Gh√©p c√°c chu·ªói vƒÉn b·∫£n ƒë√£ d·ªãch tr·ªü l·∫°i v√†o c·∫•u tr√∫c Slate ban ƒë·∫ßu.
 * @param {Array<object>} originalNodes - C·∫•u tr√∫c Slate g·ªëc.
 * @param {Array<string>} translatedTexts - M·∫£ng vƒÉn b·∫£n ƒë√£ d·ªãch.
 * @returns {Array<object>} - C·∫•u tr√∫c Slate m·ªõi v·ªõi n·ªôi dung ƒë√£ d·ªãch.
 */
function reconstructSlateWithTranslations(originalNodes, translatedTexts) {
  let translationIndex = 0;
  
  const traverseAndReplace = (nodes) => {
    return nodes.map(node => {
      if (node.hasOwnProperty('text')) {
        const translatedText = translatedTexts[translationIndex];
        const newText = translatedText !== undefined ? translatedText : node.text;
        translationIndex++;
        return { ...node, text: newText };
      }
      
      if (node.children) {
        return { ...node, children: traverseAndReplace(node.children) };
      }
      
      return node;
    });
  };

  const nodesCopy = JSON.parse(JSON.stringify(originalNodes));
  return traverseAndReplace(nodesCopy);
}

// Route cho Chat AI (Gi·ªØ nguy√™n)
router.post('/chat', async (req, res) => {
  try {
    const message = req.body.message;
    if (!message) {
      return res.status(400).json({ message: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.' });
    }
    const reply = await runChat(message);
    res.json({ reply });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});


// --- C·∫¨P NH·∫¨T L·∫†I HO√ÄN TO√ÄN ROUTE PH√ÇN T√çCH ---
router.post('/analyze-dashboard', async (req, res) => {
  try {
    const { topMacros, leastUsedMacros, categoryUsage, usageOverTime, userStats } = req.body;

    const prompt = `
      L√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu, h√£y ph√¢n t√≠ch c√°c s·ªë li·ªáu sau ƒë√¢y v·ªÅ vi·ªác s·ª≠ d·ª•ng h·ªá th·ªëng v√† ƒë∆∞a ra nh·∫≠n x√©t chi ti·∫øt c√πng v·ªõi m·ªôt k·∫ø ho·∫°ch h√†nh ƒë·ªông c·ª• th·ªÉ.

      **D·ªØ li·ªáu cung c·∫•p:**
      Top 10 macros ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t: ${JSON.stringify(topMacros, null, 2)}
      C√°c macro √≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng nh·∫•t: ${JSON.stringify(leastUsedMacros, null, 2)}
      Th·ªëng k√™ s·ª≠ d·ª•ng theo danh m·ª•c: ${JSON.stringify(categoryUsage, null, 2)}
      L∆∞·ª£t s·ª≠ d·ª•ng macro trong 30 ng√†y qua: (D·ªØ li·ªáu n√†y cho th·∫•y xu h∆∞·ªõng s·ª≠ d·ª•ng h√†ng ng√†y)
      Th·ªëng k√™ th√†nh vi√™n m·ªõi trong th√°ng: ${JSON.stringify(userStats, null, 2)}

      **Y√™u c·∫ßu:**
      H√£y tr√¨nh b√†y k·∫øt qu·∫£ ph√¢n t√≠ch theo c·∫•u tr√∫c sau, s·ª≠ d·ª•ng Markdown:
      ### üìä T√¨nh h√¨nh chung
      - ƒê∆∞a ra 3-4 nh·∫≠n x√©t quan tr·ªçng nh·∫•t v·ªÅ c√°c ƒëi·ªÉm n·ªïi b·∫≠t t·ª´ d·ªØ li·ªáu.
      ### üí° K·∫ø ho·∫°ch h√†nh ƒë·ªông ƒë·ªÅ xu·∫•t
      - D·ª±a tr√™n nh·ªØng nh·∫≠n x√©t tr√™n, ƒë·ªÅ xu·∫•t 3-5 h√†nh ƒë·ªông c·ª• th·ªÉ, kh·∫£ thi.
      H√£y vi·∫øt c√¢u tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, v·ªõi gi·ªçng vƒÉn chuy√™n nghi·ªáp v√† s√∫c t√≠ch.
    `;

    // S·ª≠ d·ª•ng l·∫°i h√†m runChat ƒë√£ ho·∫°t ƒë·ªông t·ªët
    const analysisResult = await runChat(prompt);

    res.json({ analysis: analysisResult });

  } catch (error) {
    console.error('L·ªói khi ph√¢n t√≠ch dashboard:', error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu b·∫±ng AI.' });
  }
});

// --- C·∫¨P NH·∫¨T ROUTE D·ªäCH THU·∫¨T ---
router.post('/translate', protect, async (req, res) => {
  const { content, targetLang = 'en' } = req.body;

  if (!content || !Array.isArray(content)) {
    return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p n·ªôi dung h·ª£p l·ªá.' });
  }

  try {
    const textsToTranslate = extractTextsFromSlate(content);

    if (textsToTranslate.length === 0) {
      return res.json({ translation: content });
    }

    const separator = '|||';
    const batchText = textsToTranslate.join(separator);
    
    const translationPrompt = `You are an expert translator for e-commerce customer support.
Translate the following batch of Vietnamese text segments, separated by "${separator}", into English.
**Crucial Instructions:**
1.  Maintain the original order of the segments.
2.  Return ONLY the translated segments, also separated by "${separator}".
3.  **Preserve all leading and trailing whitespace for each segment exactly.** Do not add or remove any spaces.
4.  Do not add " before and after the translation

**Input Batch:**
"${batchText}"

**Translated Batch:**`;

    const batchTranslation = await runChat(translationPrompt);

    // S·ª≠a l·ªói: Ch·ªâ x√≥a d·∫•u ", kh√¥ng x√≥a kho·∫£ng tr·∫Øng
    const translatedTexts = batchTranslation
      .split(separator)
      .map(text => text.replace(/^"|"$/g, ''));

    if (translatedTexts.length !== textsToTranslate.length) {
      console.warn('Batch translation mismatch, falling back to individual translation.');
      const fallbackTexts = await Promise.all(
        textsToTranslate.map(async (text) => {
          if (text.trim() === '') return text;
          const singlePrompt = `Translate this Vietnamese text to English for an e-commerce context. Return ONLY the translation, keeping original whitespace.\nVietnamese: "${text}"\nEnglish:`;
          
          let singleTranslation = await runChat(singlePrompt);
          // S·ª≠a l·ªói: Ch·ªâ x√≥a d·∫•u ", kh√¥ng x√≥a kho·∫£ng tr·∫Øng
          return singleTranslation.replace(/^"|"$/g, '');
        })
      );
       const newContent = reconstructSlateWithTranslations(content, fallbackTexts);
       return res.json({ translation: newContent });
    }

    const newContent = reconstructSlateWithTranslations(content, translatedTexts);
    res.json({ translation: newContent });

  } catch (error) {
    console.error('Translation Error:', error);
    res.status(500).json({ message: 'D·ªãch thu·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.' });
  }
});
module.exports = router;